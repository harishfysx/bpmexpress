/**
 * @overview
 * 
 * XHR (XMLHttpRequest) utility for nodejs, it provides a sort of convenient
 * method to mock a XHR request.
 * 
 * For example:
 * <pre>
 * var xhr = require('node-xhr');
 * 
 * xhr.post({
 *     url : 'http://localhost:3000/v1/test',
 *     headers : {
 *         'Content-Type' : 'application/json',
 *     },
 *     params : {
 *         version : 1,
 *     },
 *     body : {
 *         ...
 *     };
 * }, function(err, res) {
 *     if (err) {
 *         console.log(err.message);
 *         return;
 *     }
 * 
 *     console.log(res.body);
 * });
 * </pre>
 * 
 * @author Johnson Lee <g.johnsonlee@gmail.com>
 * 
 * @version 1.0.1
 */

var url = require('url');
var protocols = {
    http  : require('http'),
    https : require('https'),
};
var querystring = require('querystring');

protocols.http.DEFAULT_PORT = 80;
protocols.https.DEFAULT_PORT = 443;

(function() {

    /**
     * Make a WebDAV HTTP COPY request
     *
     * @param {Object} opts
     *        The options of request, including:
     * <dl>
     *   <dt>url</dt>
     *   <dd>The url to connect</dd>
     *   <dt>headers</dt>
     *   <dd>The extra HTTP headers</dd>
     *   <dt>body</dt>
     *   <dd>The data of the request</dd>
     * </dl>
     * @param {Function} callback
     *        The response handler
     */
    this.copy = function(opts, callback) {
        opts = opts || {};
        opts.method = 'COPY';
        return this.doRequest.apply(this, arguments);
    };

    /**
     * Make a WebDAV HTTP DELETE request
     *
     * @param {Object} opts
     *        The options of request, including:
     * <dl>
     *   <dt>url</dt>
     *   <dd>The url to connect</dd>
     *   <dt>headers</dt>
     *   <dd>The extra HTTP headers</dd>
     *   <dt>body</dt>
     *   <dd>The data of the request</dd>
     * </dl>
     * @param {Function} callback
     *        The response handler
     */
    this.delete = function(opts, callback) {
        opts = opts || {};
        opts.method = 'DELETE';
        return this.doRequest.apply(this, arguments);
    };

    /**
     * Make a HTTP GET request
     *
     * @param {Object} opts
     *        The options of request, including:
     * <dl>
     *   <dt>url</dt>
     *   <dd>The url to connect</dd>
     *   <dt>headers</dt>
     *   <dd>The extra HTTP headers</dd>
     *   <dt>body</dt>
     *   <dd>The data of the request</dd>
     * </dl>
     * @param {Function} callback
     *        The response handler
     */
    this.get = function(opts, callback) {
        opts = opts || {};
        opts.method = 'GET';
        return this.doRequest.apply(this, arguments);
    };

    /**
     * Make a HTTP HEAD request
     *
     * @param {Object} opts
     *        The options of request, including:
     * <dl>
     *   <dt>url</dt>
     *   <dd>The url to connect</dd>
     *   <dt>headers</dt>
     *   <dd>The extra HTTP headers</dd>
     *   <dt>body</dt>
     *   <dd>The data of the request</dd>
     * </dl>
     * @param {Function} callback
     *        The response handler
     */
    this.head = function(opts, callback) {
        opts = opts || {};
        opts.method = 'HEAD';
        return this.doRequest.apply(this, arguments);
    };

    /**
     * Make a WebDAV HTTP LOCK request
     *
     * @param {Object} opts
     *        The options of request, including:
     * <dl>
     *   <dt>url</dt>
     *   <dd>The url to connect</dd>
     *   <dt>headers</dt>
     *   <dd>The extra HTTP headers</dd>
     *   <dt>body</dt>
     *   <dd>The data of the request</dd>
     * </dl>
     * @param {Function} callback
     *        The response handler
     */
    this.lock = function(opts, callback) {
        opts = opts || {};
        opts.method = 'LOCK';
        return this.doRequest.apply(this, arguments);
    };

    /**
     * Make a WebDAV HTTP MKCOL request
     *
     * @param {Object} opts
     *        The options of request, including:
     * <dl>
     *   <dt>url</dt>
     *   <dd>The url to connect</dd>
     *   <dt>headers</dt>
     *   <dd>The extra HTTP headers</dd>
     *   <dt>body</dt>
     *   <dd>The data of the request</dd>
     * </dl>
     * @param {Function} callback
     *        The response handler
     */
    this.mkcol = function(opts, callback) {
        opts = opts || {};
        opts.method = 'MKCOL';
        return this.doRequest.apply(this, arguments);
    };

    /**
     * Make a WebDAV HTTP MOVE request
     *
     * @param {Object} opts
     *        The options of request, including:
     * <dl>
     *   <dt>url</dt>
     *   <dd>The url to connect</dd>
     *   <dt>headers</dt>
     *   <dd>The extra HTTP headers</dd>
     *   <dt>body</dt>
     *   <dd>The data of the request</dd>
     * </dl>
     * @param {Function} callback
     *        The response handler
     */
    this.move = function(opts, callback) {
        opts = opts || {};
        opts.method = 'MOVE';
        return this.doRequest.apply(this, arguments);
    };

    /**
     * Make a WebDAV HTTP OPTIONS request
     *
     * @param {Object} opts
     *        The options of request, including:
     * <dl>
     *   <dt>url</dt>
     *   <dd>The url to connect</dd>
     *   <dt>headers</dt>
     *   <dd>The extra HTTP headers</dd>
     *   <dt>body</dt>
     *   <dd>The data of the request</dd>
     * </dl>
     * @param {Function} callback
     *        The response handler
     */
    this.options = function(opts, callback) {
        opts = opts || {};
        opts.method = 'OPTIONS';
        return this.doRequest.apply(this, arguments);
    };

    /**
     * Make a HTTP POST request
     *
     * @param {Object} opts
     *        The options of request, including:
     * <dl>
     *   <dt>url</dt>
     *   <dd>The url to connect</dd>
     *   <dt>headers</dt>
     *   <dd>The extra HTTP headers</dd>
     *   <dt>body</dt>
     *   <dd>The data of the request</dd>
     * </dl>
     * @param {Function} callback
     *        The response handler
     */
    this.post = function(opts, callback) {
        opts = opts || {};
        opts.method = 'POST';
        return this.doRequest.apply(this, arguments);
    };

    /**
     * Make a WebDAV HTTP PUT request
     *
     * @param {Object} opts
     *        The options of request, including:
     * <dl>
     *   <dt>url</dt>
     *   <dd>The url to connect</dd>
     *   <dt>headers</dt>
     *   <dd>The extra HTTP headers</dd>
     *   <dt>body</dt>
     *   <dd>The data of the request</dd>
     * </dl>
     * @param {Function} callback
     *        The response handler
     */
    this.put = function(opts, callback) {
        opts = opts || {};
        opts.method = 'PUT';
        return this.doRequest.apply(this, arguments);
    };

    /**
     * Make a WebDAV HTTP TRACE request
     *
     * @param {Object} opts
     *        The options of request, including:
     * <dl>
     *   <dt>url</dt>
     *   <dd>The url to connect</dd>
     *   <dt>headers</dt>
     *   <dd>The extra HTTP headers</dd>
     *   <dt>body</dt>
     *   <dd>The data of the request</dd>
     * </dl>
     * @param {Function} callback
     *        The response handler
     */
    this.trace = function(opts, callback) {
        opts = opts || {};
        opts.method = 'TRACE';
        return this.doRequest.apply(this, arguments);
    };

    /**
     * Make a HTTP request with the specified options
     *
     * @param {Object} opts
     *        The options of request, including:
     * <dl>
     *   <dt>method</dt>
     *   <dd>The HTTP method, default is {@code GET}</dd>
     *   <dt>url</dt>
     *   <dd>The url to connect</dd>
     *   <dt>headers</dt>
     *   <dd>The extra HTTP headers</dd>
     *   <dt>params</dt>
     *   <dd>The query string params</dd>
     *   <dt>body</dt>
     *   <dd>The data of the request</dd>
     * </dl>
     * @param {Function} callback
     *        The response handler
     */
    this.doRequest = function(opts, callback) {
        var self = this;
        var uri = url.parse(opts.url);
        var protocol = protocols[uri.protocol.replace(/:$/, '')];
        var req = protocol.request({
            method   : opts.method || 'GET',
            hostname : uri.hostname,
            port     : uri.port || protocol.DEFAULT_PORT,
            path     : uri.path + (/^\?/.test(uri.search) ? '' : '?') + this.encodeURL(opts.params),
            auth     : opts.auth,
            headers  : opts.headers || {},
        }, function(res) {
            var body = '';

            res.on('data', function(chunk) {
                body += chunk;
            });

            res.on('end', function() {
                if ('function' !== typeof callback) {
                    return;
                }

                var result = {
                    method : res.method,
                    url    : res.url,
                    status : {
                        code : res.statusCode,
                        message : res.statusMessage,
                    },
                    headers : res.headers,
                };
                var contentType = res.headers['content-type'];

                if (/application\/json/i.test(contentType)) {
                    try {
                        result.body = JSON.parse(body);
                    } catch (e) {
                        return callback.call(self, e);
                    }
                } else {
                    result.body = body;
                }

                return callback.call(self, null, result);
            });
        });

        req.on('error', function(e) {
            if ('function' === typeof callback) {
                return callback.call(self, e);
            }
        });

        if ('string' === typeof opts.body) {
            req.write(opts.body);
        } else if (opts.body) {
            req.write(JSON.stringify(opts.body));
        }

        req.end();
    };

    /**
     * Encode the specified object as query string
     * 
     * @param o {Object}
     *        The object to encode
     * @return a query string
     */
    this.encodeURL = function(o) {
        o = o || {};

        function stringify(k, v) {
            if (Object === v.constructor) {
                return [
                    encodeURIComponent(k),
                    encodeURIComponent(JSON.stringify(v)),
                ].join('=');
            }

            if (Array === v.constructor) {
                var multi = [];

                for (var i = 0; i < v.length; i++) {
                    multi.push(stringify(k, v[i]));
                }

                return multi.join('&');
            }

            return [
                encodeURIComponent(k),
                encodeURIComponent(v),
            ].join('=');
        }

        var params = [];

        for (var i in o) {
            params.push(stringify(i, o[i]));
        }

        return params.join('&');
    };

}).call(module.exports);
